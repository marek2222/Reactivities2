
6: Create GitRepository on GitHub or another:
  with name: Reactivities2

    mkdir Reactivities2
    cd Reactivities2

    dotnet -h
    dotnet new -h

  Solution and library:
    dotnet new sln

    dotnet new classlib -n Domain
    cd Domain
    dir
    cd ..

    dotnet new classlib -n Application

    dotnet new classlib -n Persistance

    dotnet new webapi -n API

  // Not do it:
  // An update for template pack Microsoft.DotNet.Web.ProjectTemplates.3.0::3.0.0 is available.
  //  install command: dotnet new -i Microsoft.DotNet.Web.ProjectTemplates.3.0::3.0.1


----------------------------------------
7. Creating the project references using the DotNet CLI
    dotnet sln -h
    dotnet sln add Domain
    dotnet sln add Application
    dotnet sln add Persistance
    dotnet sln add API

    dotnet sln list
    -- output
        Projekty
        --------
        Domain\Domain.csproj
        Application\Application.csproj
        Persistance\Persistance.csproj
        API\API.csproj

    cd Application\
    dotnet add reference ..\Domain\
    dotnet add reference ..\Persistance\

    cd ..
    cd API\
    dotnet add reference ..\Application\

    cd ..
    cd Persistance\
    dotnet add reference ..\Domain\

    cd ..  -> to Reactivities2
    code
    

----------------------------------------
2.8. Reviewing the Project files

----------------------------------------
2.9. Running the application 
  - on localhost:5000
    dotnet run -- not doing
    dotnet run -p API/
    

----------------------------------------
2.10. Creating a Domain entity


----------------------------------------
2.11. Creating the DbContext and service


----------------------------------------
2.12. Adding our first Entity Framework code first migration
  - in Reactivities2:
    dotnet tool install --global dotnet-ef --version 3.0.0
  
  - in API.csproj:
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="3.0.0"/>

  - in Reactivities2: 
    dotnet ef migrations add InitialCreate -p Persistance/ -s API


----------------------------------------
2.13. Creating the database

    dotnet ef -h

    -- watch run should be run in project directory
    cd API
    dotnet watch run

    By F1 (CommandPalete) and write: SQLite: Open database
    and choose our db: reactivities2.db
    You can show all tables of the db in the bottom left near Outline.
     
----------------------------------------
2.14. Seeding data using Entity Framework fluent configuration
  - add SeedValues method to DataContext
  - in Reactivities2:
    dotnet ef migrations add SeedValues -p Persistance/ -s API
  - open SQLite: Open database and choose our db: reactivities2.db


----------------------------------------
2.15. Using Dependancy Injection
  - write word 'private' in Preferences/Settings/User
    Add a '_' sign to prefix for generated private member declarations

  - I initialize Field From Parameter to take this effect.
 
    private readonly DataContext _context;
    public ValuesController(DataContext context)
    {
      this._context = context;
    }


----------------------------------------
2.16. Introduction to Postman


----------------------------------------
2.17. Saving our changes into Source control using Git
  - in Reactivities2:
    git status
    git init
    git add .
    git commit -m "Initial Commit"

  - If you want to use the GitHub repository
    1. create a new GitHub repository  
    2. or create a new repository on the command line
      echo "# GitRepositoryName" >> README.md
      git init
      git add README.md
      git commit -m "first commit"
      git remote add origin https://github.com/marek2222/GitRepositoryName.git
      git push -u origin master


    1.Push an existing repository from the command line in VS Code
      git remote add origin https://github.com/marek2222/GitRepositoryName.git
      git push -u origin master


----------------------------------------
2.18. Section 2 summary


----------------------------------------
----------------------------------------
----------------------------------------
3.19. Section 3 introduction


----------------------------------------
3.20.  Using create-react-app to create our React application
  - let's install client-app in Reactivities2 by 
    npx create-react-app client-app --use-npm --typescript

  - or copy client-app folder to Reactivities2 and run:
    npm install

  After install you can run client-app by:
    cd client-app
    npm start


----------------------------------------
3.21.  Reviewing the React project files

3.22. Introduction to React - Concepts  

3.23. Introduction to React - Components

3.24. Introduction to Typescript

----------------------------------------
3.25. Typescript basics demo

3.26. Using Typescript with React

3.27. Adding React dev tools

----------------------------------------
3.28. React Class Components


----------------------------------------
3.29. Using React State
    dotnet watch run


----------------------------------------
3.30. Fetching data from the API
    npm install axios@0.19.0


----------------------------------------
3.31. Adding CORS support to the API


----------------------------------------
3.32. Adding Semantic UI to our app
    npm i semantic-ui-react@0.87.2


----------------------------------------
3.33. Clean up and saving our code to source control




----------------------------------------
----------------------------------------
----------------------------------------
4.35. Building a CRUD application in .Net Core 
      using the CQRS + Mediator pattern


----------------------------------------
4.36. Adding the Activity entity
  - in Reactivities2:
    dotnet ef migrations add ActivityEntityAdded -p Persistance -s API
    
    cd API\
    dotnet watch run


----------------------------------------
4.37. Seeding Activity data
    cd API\
    dotnet watch run

4.38. Commands and Queries - CQRS

4.39. Introduction to MediatR


----------------------------------------
4.40. Creating our first Query handler
  - in Reactivities2\Application:    
    dotnet add package MediatR.Extensions.Microsoft.DependencyInjection --version 7.0.0



----------------------------------------
4.41. 


----------------------------------------
4.42. 
